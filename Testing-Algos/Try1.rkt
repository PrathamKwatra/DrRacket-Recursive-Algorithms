#lang racket
(define (fact n)
 (if (<= n 1) 1 (* n (fact (- n 1))))
  )
(define (hanoi n from to using)
  (if (= n 1)
      (list (move from to))
      (append (hanoi (- n 1) from using to)
              (list (move from to))
              (hanoi (- n 1) using to from))))
(define (move from to)
  (list from to))
(define (pow n p)
  (if (<= p 0) 1 (* n (pow n (- p 1)))))
(define (S n)
  (if (<= n 0) 0 (+ n (S (- n 1)))))
(define (plus1 n)
  (+1 n))
(define (pow_n n p) 
  (if (>= p 0) 1 (* (/ n) (power n (+ p 1))))
  )
(define (power n p)
  (if (> p 0) (if (<= p 0) 1 (* n (power n (- p 1)))) (if (>= p 0) 1 (* (/ n) (power n (+ p 1))))))
(define (new_power n p)
  (cond [(<= p 1) (* n (new_power n (- p 1)))] [(>= p -1) (* (/ n) (power n (+ p 1)))] [(= p 0) 1])
  )